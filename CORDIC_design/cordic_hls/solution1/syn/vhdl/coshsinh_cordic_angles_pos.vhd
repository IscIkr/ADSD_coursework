-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity coshsinh_cordic_angles_pos_rom is 
    generic(
             dwidth     : integer := 64; 
             awidth     : integer := 6; 
             mem_size    : integer := 60
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of coshsinh_cordic_angles_pos_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0011111111100001100100111101110110010111111101100010101101101011", 
    1 => "0011111111010000010110000111100100111101110110010111111101100011", 
    2 => "0011111111000000000101101111000000000110100011011011100010111011", 
    3 => "0011111110110000000001101000110110111000101110101100011100010001", 
    4 => "0011111110100000000001101000110110111000101110101100011100010001", 
    5 => "0011111111000011111101111100111011011001000101101000011100101011", 
    6 => "0011111101111111111100101110010010001110100010100111000111011110", 
    7 => "0011111101101111111100101110010010001110100010100111000111011110", 
    8 => "0011111101100000011000100100110111010010111100011010100111111100", 
    9 => "0011111101001111111111111111101010100001100111000100011101110100", 
    10 => "0011111100111111111111111111101010100001100111000100011101110100", 
    11 => "0011111100101111111111111111101010100001100111000100011101110100", 
    12 => "0011111100011111111111111111101010100001100111000100011101110100", 
    13 => "0011111100001111111111111111101010100001100111000100011101110100", 
    14 => "0011111100000000000000000000111001111110110110100000101111100001", 
    15 => "0011111011110000000000000000111001111110110110100000101111100001", 
    16 => "0011111011100000000000000000000011000000011010100001111011110101", 
    17 => "0011111011010000000000000000000011000000011010100001111011110101", 
    18 => "0011111010111111111111111100101010000111000101001000101000111010", 
    19 => "0011111010101111111111111111011010000010000101000100110100101101", 
    20 => "0011111010100000000000000000011000111111110010100001011101010011", 
    21 => "0011111010010000000000000000011000111111110010100001011101010011", 
    22 => "0011111010000000000000000000011000111111110010100001011101010011", 
    23 => "0011111001110000000000000000011000111111110010100001011101010011", 
    24 => "0011111001011111111111111110100101010000011000010010110001001011", 
    25 => "0011111001001111111111111110100101010000011000010010110001001011", 
    26 => "0011111001000000000000000000001010111011000100011100101001001010", 
    27 => "0011111000110000000000000000001010111011000100011100101001001010", 
    28 => "0011111000011111111111111100110100101010100111101100010000000001", 
    29 => "0011111000001111111111111111101000110011110101011101000101000100", 
    30 => "0011110111111111111111111111101000110011110101011101000101000100", 
    31 => "0011110111101111111111111111101000110011110101011101000101000100", 
    32 => "0011110111100000000000000010101000100011001000011111010111100100", 
    33 => "0011110111010000000000000000011000011011110000101011100000010101", 
    34 => "0011110111000000000000000000011000011011110000101011100000010101", 
    35 => "0011110110110000000000000000011000011011110000101011100000010101", 
    36 => "0011110110100000000000000000011000011011110000101011100000010101", 
    37 => "0011110110010000000000000000011000011011110000101011100000010101", 
    38 => "0011110110000000000000000000011000011011110000101011100000010101", 
    39 => "0011110101101111111111111111010100101000100100000010100111100100", 
    40 => "0011110101100000000000000000011000011011110000101011100000010101", 
    41 => "0011110101001111111111111101111000011001100110101110001110011101", 
    42 => "0011110101000000000000000001110100101010101101111111111001011100", 
    43 => "0011110100101111111111111111000010001011111110001011010101101111", 
    44 => "0011110100100000000000000000101010111000010110100010110010001010", 
    45 => "0011110100010000000000000000101010111000010110100010110010001010", 
    46 => "0011110011111111111111111111011111101100111010110000100101011101", 
    47 => "0011110011101111111111111111011111101100111010110000100101011101", 
    48 => "0011110011100000000000000001100101111010001111101101010001100101", 
    49 => "0011110011010000000000000000000111011101100111011100011111010011", 
    50 => "0011110011000000000000000000000111011101100111011100011111010011", 
    51 => "0011110010101111111111111101010010000001111110010111011010000010", 
    52 => "0011110010011111111111111101010010000001111110010111011010000010", 
    53 => "0011110010001111111111111111101001001001011000011000101010011111", 
    54 => "0011110010000000000000000001000000001000011001001100111101011110", 
    55 => "0011110001110000000000000001000000001000011001001100111101011110", 
    56 => "0011110001100000000000000000000011101011110101001100011101010010", 
    57 => "0011110001001111111111111110001110011110100010010111111010001101", 
    58 => "0011110000111111111111111110001110011110100010010111111010001101", 
    59 => "0000000000000000000000000000000000000000000000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity coshsinh_cordic_angles_pos is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 60;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of coshsinh_cordic_angles_pos is
    component coshsinh_cordic_angles_pos_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    coshsinh_cordic_angles_pos_rom_U :  component coshsinh_cordic_angles_pos_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


