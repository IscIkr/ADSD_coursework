-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity coshsinh_cordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    beta : IN STD_LOGIC_VECTOR (63 downto 0);
    m : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    ch : OUT STD_LOGIC_VECTOR (63 downto 0);
    ch_ap_vld : OUT STD_LOGIC;
    sh : OUT STD_LOGIC_VECTOR (63 downto 0);
    sh_ap_vld : OUT STD_LOGIC );
end;


architecture behav of coshsinh_cordic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "coshsinh_cordic,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.395400,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=39,HLS_SYN_FF=3636,HLS_SYN_LUT=6834}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (58 downto 0) := "00000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (58 downto 0) := "00000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (58 downto 0) := "00000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (58 downto 0) := "00000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (58 downto 0) := "00000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (58 downto 0) := "00000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (58 downto 0) := "00001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (58 downto 0) := "00010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (58 downto 0) := "00100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (58 downto 0) := "01000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (58 downto 0) := "10000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FB0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE193DD97F62B6B : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100001100100111101110110010111111101100010101101101011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_74 : BOOLEAN;
    signal angles_neg_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal angles_neg_ce0 : STD_LOGIC;
    signal angles_neg_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal angles_pos_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal angles_pos_ce0 : STD_LOGIC;
    signal angles_pos_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_109 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_116 : BOOLEAN;
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_124 : BOOLEAN;
    signal ap_sig_cseq_ST_st53_fsm_52 : STD_LOGIC;
    signal ap_sig_132 : BOOLEAN;
    signal sel_tmp4_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_259_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_147 : BOOLEAN;
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_154 : BOOLEAN;
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_162 : BOOLEAN;
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_170 : BOOLEAN;
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_178 : BOOLEAN;
    signal reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_188 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_195 : BOOLEAN;
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_315 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_321 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_211 : BOOLEAN;
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_218 : BOOLEAN;
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_328 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_335 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_reg_711 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_factor_fu_382_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sign_factor_reg_657 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_248 : BOOLEAN;
    signal tmp_3_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal angle_reg_681 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_262 : BOOLEAN;
    signal sigma_fu_461_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sigma_reg_686 : STD_LOGIC_VECTOR (63 downto 0);
    signal factor_reg_691 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_272 : BOOLEAN;
    signal sigma_1_fu_516_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sigma_1_reg_700 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_281 : BOOLEAN;
    signal tmp_8_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal angle_3_fu_571_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal angle_3_reg_728 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_300 : BOOLEAN;
    signal sigma_2_fu_620_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sigma_2_reg_733 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_assign_2_reg_739 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_310 : BOOLEAN;
    signal beta_assign_3_fu_628_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_assign_3_reg_744 : STD_LOGIC_VECTOR (63 downto 0);
    signal s2_2_reg_749 : STD_LOGIC_VECTOR (63 downto 0);
    signal c2_3_fu_634_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st54_fsm_53 : STD_LOGIC;
    signal ap_sig_323 : BOOLEAN;
    signal s2_3_fu_641_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ch_load_reg_120 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_132 : STD_LOGIC_VECTOR (63 downto 0);
    signal poweroftwo_reg_144 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_reg_165 : STD_LOGIC_VECTOR (63 downto 0);
    signal ch_load_2_reg_175 : STD_LOGIC_VECTOR (63 downto 0);
    signal sh_load_reg_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal angle1_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal poweroftwo_1_reg_209 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_reg_232 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st59_fsm_58 : STD_LOGIC;
    signal ap_sig_362 : BOOLEAN;
    signal grp_fu_243_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_371 : BOOLEAN;
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_378 : BOOLEAN;
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_385 : BOOLEAN;
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_392 : BOOLEAN;
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_399 : BOOLEAN;
    signal grp_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_259_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_416 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_423 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_431 : BOOLEAN;
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_438 : BOOLEAN;
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_286_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_to_int_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_344_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_354_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_to_int_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_423_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_433_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs1_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_to_int_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_478_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_488_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_assign_1_to_int_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_582_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_592_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs3_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_243_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (58 downto 0);

    component coshsinh_cordic_dadddsub_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component coshsinh_cordic_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component coshsinh_cordic_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component coshsinh_cordic_dcmp_64ns_64ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component coshsinh_cordic_angles_neg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component coshsinh_cordic_angles_pos IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    angles_neg_U : component coshsinh_cordic_angles_neg
    generic map (
        DataWidth => 64,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => angles_neg_address0,
        ce0 => angles_neg_ce0,
        q0 => angles_neg_q0);

    angles_pos_U : component coshsinh_cordic_angles_pos
    generic map (
        DataWidth => 64,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => angles_pos_address0,
        ce0 => angles_pos_ce0,
        q0 => angles_pos_q0);

    coshsinh_cordic_dadddsub_64ns_64ns_64_5_full_dsp_U0 : component coshsinh_cordic_dadddsub_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_243_p0,
        din1 => grp_fu_243_p1,
        opcode => grp_fu_243_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    coshsinh_cordic_dadd_64ns_64ns_64_5_full_dsp_U1 : component coshsinh_cordic_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_315,
        din1 => grp_fu_251_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p2);

    coshsinh_cordic_dmul_64ns_64ns_64_6_max_dsp_U2 : component coshsinh_cordic_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_259_p0,
        din1 => grp_fu_259_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_259_p2);

    coshsinh_cordic_dmul_64ns_64ns_64_6_max_dsp_U3 : component coshsinh_cordic_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_266_p0,
        din1 => grp_fu_266_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    coshsinh_cordic_dmul_64ns_64ns_64_6_max_dsp_U4 : component coshsinh_cordic_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        din1 => ap_const_lv64_3FE0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_277_p2);

    coshsinh_cordic_dcmp_64ns_64ns_1_1_U5 : component coshsinh_cordic_dcmp_64ns_64ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_286_p0,
        din1 => ap_const_lv64_0,
        opcode => ap_const_lv5_4,
        dout => grp_fu_286_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    angle1_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_3_fu_396_p2))) then 
                angle1_reg_197 <= ap_const_lv64_3FE193DD97F62B6B;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
                angle1_reg_197 <= angle_3_reg_728;
            end if; 
        end if;
    end process;

    ch_load_2_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_3_fu_396_p2))) then 
                ch_load_2_reg_175 <= ch_load_reg_120;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
                ch_load_2_reg_175 <= c2_3_fu_634_p3;
            end if; 
        end if;
    end process;

    ch_load_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                ch_load_reg_120 <= grp_fu_243_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                ch_load_reg_120 <= ap_const_lv64_3FF0000000000000;
            end if; 
        end if;
    end process;

    j1_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                j1_reg_156 <= j_2_reg_676;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j1_reg_156 <= j_fu_390_p2;
            end if; 
        end if;
    end process;

    j_1_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_3_fu_396_p2))) then 
                j_1_reg_220 <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
                j_1_reg_220 <= j_3_reg_706;
            end if; 
        end if;
    end process;

    p_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                p_0_reg_165 <= reg_294;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_0_reg_165 <= beta;
            end if; 
        end if;
    end process;

    p_1_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_3_fu_396_p2))) then 
                p_1_reg_232 <= p_0_reg_165;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
                p_1_reg_232 <= beta_assign_3_reg_744;
            end if; 
        end if;
    end process;

    poweroftwo_1_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_3_fu_396_p2))) then 
                poweroftwo_1_reg_209 <= poweroftwo_reg_144;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
                poweroftwo_1_reg_209 <= reg_335;
            end if; 
        end if;
    end process;

    poweroftwo_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                poweroftwo_reg_144 <= reg_302;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                poweroftwo_reg_144 <= ap_const_lv64_3FB0000000000000;
            end if; 
        end if;
    end process;

    sh_load_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_3_fu_396_p2))) then 
                sh_load_reg_186 <= tmp_2_reg_132;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then 
                sh_load_reg_186 <= s2_3_fu_641_p3;
            end if; 
        end if;
    end process;

    tmp_2_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                tmp_2_reg_132 <= grp_fu_251_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                tmp_2_reg_132 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                angle_3_reg_728 <= angle_3_fu_571_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                angle_reg_681 <= angles_neg_q0;
                    sigma_reg_686(63) <= sigma_fu_461_p3(63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((sel_tmp4_reg_716 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46))) then
                beta_assign_2_reg_739 <= grp_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then
                beta_assign_3_reg_744 <= beta_assign_3_fu_628_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                factor_reg_691 <= grp_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = tmp_3_fu_396_p2)))) then
                j_2_reg_676 <= j_2_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (ap_const_lv1_0 = tmp_8_fu_469_p2))) then
                j_3_reg_706 <= j_3_fu_524_p2;
                    sigma_1_reg_700(63) <= sigma_1_fu_516_p3(63);
                tmp_21_reg_711 <= tmp_21_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) or ((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) and not((sel_tmp4_reg_716 = ap_const_lv1_0))))) then
                reg_294 <= grp_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) or (not((sel_tmp4_reg_716 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)))) then
                reg_302 <= grp_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then
                reg_310 <= grp_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (not((sel_tmp4_reg_716 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (not((sel_tmp4_reg_716 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)))) then
                reg_315 <= grp_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40))) then
                reg_321 <= grp_fu_243_p2;
                reg_328 <= grp_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) or ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) and not((ap_const_lv1_0 = tmp_21_reg_711))))) then
                reg_335 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_52) and not((sel_tmp4_reg_716 = ap_const_lv1_0)))) then
                s2_2_reg_749 <= grp_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                sel_tmp4_reg_716 <= sel_tmp4_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then
                    sigma_2_reg_733(63) <= sigma_2_fu_620_p3(63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    sign_factor_reg_657(63) <= sign_factor_fu_382_p3(63);
            end if;
        end if;
    end process;
    sign_factor_reg_657(62 downto 0) <= "011111111110000000000000000000000000000000000000000000000000000";
    sigma_reg_686(62 downto 0) <= "011111111110000000000000000000000000000000000000000000000000000";
    sigma_1_reg_700(62 downto 0) <= "011111111110000000000000000000000000000000000000000000000000000";
    sigma_2_reg_733(62 downto 0) <= "011111111110000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_3_fu_396_p2, tmp_8_fu_469_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = tmp_3_fu_396_p2)) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st24_fsm_23 => 
                if (not((ap_const_lv1_0 = tmp_8_fu_469_p2))) then
                    ap_NS_fsm <= ap_ST_st55_fsm_54;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                end if;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    angle_3_fu_571_p3 <= 
        reg_335 when (tmp_21_reg_711(0) = '1') else 
        angles_pos_q0;
    angles_neg_address0 <= tmp_5_fu_408_p1(4 - 1 downto 0);

    angles_neg_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            angles_neg_ce0 <= ap_const_logic_1;
        else 
            angles_neg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    angles_pos_address0 <= tmp_22_fu_566_p1(6 - 1 downto 0);

    angles_pos_ce0_assign_proc : process(ap_sig_cseq_ST_st30_fsm_29)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then 
            angles_pos_ce0 <= ap_const_logic_1;
        else 
            angles_pos_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_sig_cseq_ST_st59_fsm_58)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st59_fsm_58)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_109 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_116 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_124 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    ap_sig_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_132 <= (ap_const_lv1_1 = ap_CS_fsm(52 downto 52));
    end process;


    ap_sig_147_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_147 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_154 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    ap_sig_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_162 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    ap_sig_170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_170 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    ap_sig_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_178 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    ap_sig_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_188 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_195_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_195 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_211_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_211 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_218_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_218 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    ap_sig_248_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_248 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_262_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_262 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_272_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_272 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_281_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_281 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_300_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_300 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_310_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_310 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    ap_sig_323_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_323 <= (ap_const_lv1_1 = ap_CS_fsm(53 downto 53));
    end process;


    ap_sig_362_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_362 <= (ap_const_lv1_1 = ap_CS_fsm(58 downto 58));
    end process;


    ap_sig_371_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_371 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_378_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_378 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_385_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_385 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    ap_sig_392_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_392 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    ap_sig_399_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_399 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    ap_sig_416_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_416 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_423_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_423 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_431_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_431 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_438 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_74_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_74 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_371)
    begin
        if (ap_sig_371) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_272)
    begin
        if (ap_sig_272) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_431)
    begin
        if (ap_sig_431) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_116)
    begin
        if (ap_sig_116) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_195)
    begin
        if (ap_sig_195) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_378)
    begin
        if (ap_sig_378) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_74)
    begin
        if (ap_sig_74) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_211)
    begin
        if (ap_sig_211) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_281)
    begin
        if (ap_sig_281) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_438)
    begin
        if (ap_sig_438) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_248)
    begin
        if (ap_sig_248) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_154)
    begin
        if (ap_sig_154) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_300)
    begin
        if (ap_sig_300) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_124)
    begin
        if (ap_sig_124) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_162)
    begin
        if (ap_sig_162) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_385)
    begin
        if (ap_sig_385) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_262)
    begin
        if (ap_sig_262) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_218)
    begin
        if (ap_sig_218) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_170)
    begin
        if (ap_sig_170) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_392)
    begin
        if (ap_sig_392) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_310)
    begin
        if (ap_sig_310) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_178)
    begin
        if (ap_sig_178) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_399)
    begin
        if (ap_sig_399) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_416)
    begin
        if (ap_sig_416) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st53_fsm_52_assign_proc : process(ap_sig_132)
    begin
        if (ap_sig_132) then 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st53_fsm_52 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st54_fsm_53_assign_proc : process(ap_sig_323)
    begin
        if (ap_sig_323) then 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st59_fsm_58_assign_proc : process(ap_sig_362)
    begin
        if (ap_sig_362) then 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st59_fsm_58 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_109)
    begin
        if (ap_sig_109) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_423)
    begin
        if (ap_sig_423) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_147)
    begin
        if (ap_sig_147) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_188)
    begin
        if (ap_sig_188) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    beta_assign_1_to_int_fu_578_p1 <= reg_294;
    beta_assign_3_fu_628_p3 <= 
        beta_assign_2_reg_739 when (sel_tmp4_reg_716(0) = '1') else 
        reg_294;
    beta_to_int_fu_340_p1 <= beta;
    c2_3_fu_634_p3 <= 
        reg_294 when (sel_tmp4_reg_716(0) = '1') else 
        reg_321;
    ch <= grp_fu_259_p2;

    ch_ap_vld_assign_proc : process(ap_sig_cseq_ST_st59_fsm_58)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58)) then 
            ch_ap_vld <= ap_const_logic_1;
        else 
            ch_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_243_opcode_assign_proc : process(sel_tmp4_reg_716, ap_sig_cseq_ST_st2_fsm_1, tmp_3_fu_396_p2, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st49_fsm_48)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = tmp_3_fu_396_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (not((sel_tmp4_reg_716 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)))) then 
            grp_fu_243_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (not((sel_tmp4_reg_716 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)))) then 
            grp_fu_243_opcode <= ap_const_lv2_0;
        else 
            grp_fu_243_opcode <= "XX";
        end if; 
    end process;


    grp_fu_243_p0_assign_proc : process(reg_294, reg_321, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st31_fsm_30, ch_load_reg_120, p_0_reg_165, ch_load_2_reg_175, p_1_reg_232, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st49_fsm_48)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
            grp_fu_243_p0 <= reg_321;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            grp_fu_243_p0 <= reg_294;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_243_p0 <= ch_load_2_reg_175;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_243_p0 <= p_1_reg_232;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            grp_fu_243_p0 <= ch_load_reg_120;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_fu_243_p0 <= p_0_reg_165;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_243_p0 <= ap_const_lv64_3FF0000000000000;
        else 
            grp_fu_243_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_243_p1_assign_proc : process(reg_302, reg_310, reg_315, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st31_fsm_30, poweroftwo_reg_144, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st49_fsm_48)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            grp_fu_243_p1 <= reg_302;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42))) then 
            grp_fu_243_p1 <= reg_315;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then 
            grp_fu_243_p1 <= reg_310;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_243_p1 <= poweroftwo_reg_144;
        else 
            grp_fu_243_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_251_p1_assign_proc : process(reg_328, tmp_2_reg_132, sh_load_reg_186, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st49_fsm_48)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
            grp_fu_251_p1 <= reg_328;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_251_p1 <= sh_load_reg_186;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            grp_fu_251_p1 <= tmp_2_reg_132;
        else 
            grp_fu_251_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_259_p0_assign_proc : process(reg_302, sign_factor_reg_657, ap_sig_cseq_ST_st3_fsm_2, sigma_reg_686, factor_reg_691, sigma_1_reg_700, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st31_fsm_30, sigma_2_reg_733, poweroftwo_reg_144, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_259_p0 <= sigma_2_reg_733;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42))) then 
            grp_fu_259_p0 <= reg_302;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_259_p0 <= sigma_1_reg_700;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_259_p0 <= sign_factor_reg_657;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_259_p0 <= factor_reg_691;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            grp_fu_259_p0 <= sigma_reg_686;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_259_p0 <= poweroftwo_reg_144;
        else 
            grp_fu_259_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_259_p1_assign_proc : process(reg_294, reg_328, angle_reg_681, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st31_fsm_30, tmp_2_reg_132, ch_load_2_reg_175, sh_load_reg_186, poweroftwo_1_reg_209, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            grp_fu_259_p1 <= reg_328;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_259_p1 <= sh_load_reg_186;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24))) then 
            grp_fu_259_p1 <= poweroftwo_1_reg_209;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_259_p1 <= ch_load_2_reg_175;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_259_p1 <= tmp_2_reg_132;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_259_p1 <= reg_294;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_fu_259_p1 <= angle_reg_681;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_259_p1 <= ap_const_lv64_4000000000000000;
        else 
            grp_fu_259_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_266_p0_assign_proc : process(reg_302, sign_factor_reg_657, factor_reg_691, sigma_1_reg_700, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st31_fsm_30, sigma_2_reg_733, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_266_p0 <= sigma_2_reg_733;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42))) then 
            grp_fu_266_p0 <= reg_302;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_266_p0 <= sigma_1_reg_700;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_266_p0 <= sign_factor_reg_657;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_266_p0 <= factor_reg_691;
        else 
            grp_fu_266_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_266_p1_assign_proc : process(reg_321, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st31_fsm_30, ch_load_reg_120, ch_load_2_reg_175, sh_load_reg_186, angle1_reg_197, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st43_fsm_42, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
            grp_fu_266_p1 <= reg_321;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_266_p1 <= ch_load_2_reg_175;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24))) then 
            grp_fu_266_p1 <= angle1_reg_197;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_266_p1 <= sh_load_reg_186;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_266_p1 <= ch_load_reg_120;
        else 
            grp_fu_266_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_277_p0_assign_proc : process(angle1_reg_197, poweroftwo_1_reg_209, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_277_p0 <= poweroftwo_1_reg_209;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_277_p0 <= angle1_reg_197;
        else 
            grp_fu_277_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_286_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, beta, reg_294, ap_sig_cseq_ST_st36_fsm_35, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st24_fsm_23, p_0_reg_165, p_1_reg_232)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
            grp_fu_286_p0 <= reg_294;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_286_p0 <= p_1_reg_232;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_286_p0 <= p_0_reg_165;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_286_p0 <= beta;
        else 
            grp_fu_286_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    j_2_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j1_reg_156));
    j_3_fu_524_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j_1_reg_220));
    j_fu_390_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(m));
    notlhs1_fu_437_p2 <= "0" when (tmp_23_fu_423_p4 = ap_const_lv11_7FF) else "1";
    notlhs2_fu_492_p2 <= "0" when (tmp_28_fu_478_p4 = ap_const_lv11_7FF) else "1";
    notlhs3_fu_596_p2 <= "0" when (tmp_33_fu_582_p4 = ap_const_lv11_7FF) else "1";
    notlhs_fu_358_p2 <= "0" when (tmp_fu_344_p4 = ap_const_lv11_7FF) else "1";
    notrhs1_fu_443_p2 <= "1" when (tmp_24_fu_433_p1 = ap_const_lv52_0) else "0";
    notrhs2_fu_498_p2 <= "1" when (tmp_29_fu_488_p1 = ap_const_lv52_0) else "0";
    notrhs3_fu_602_p2 <= "1" when (tmp_34_fu_592_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_364_p2 <= "1" when (tmp_6_fu_354_p1 = ap_const_lv52_0) else "0";
    p_0_to_int_fu_419_p1 <= p_0_reg_165;
    p_1_to_int_fu_474_p1 <= p_1_reg_232;
    s2_3_fu_641_p3 <= 
        s2_2_reg_749 when (sel_tmp4_reg_716(0) = '1') else 
        reg_328;
    sel_tmp1_fu_542_p2 <= "1" when (j_1_reg_220 = ap_const_lv32_D) else "0";
    sel_tmp2_fu_548_p2 <= "1" when (j_1_reg_220 = ap_const_lv32_4) else "0";
    sel_tmp4_fu_560_p2 <= (tmp1_fu_554_p2 or sel_tmp_fu_536_p2);
    sel_tmp_fu_536_p2 <= "1" when (j_1_reg_220 = ap_const_lv32_28) else "0";
    sh <= grp_fu_266_p2;

    sh_ap_vld_assign_proc : process(ap_sig_cseq_ST_st59_fsm_58)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st59_fsm_58)) then 
            sh_ap_vld <= ap_const_logic_1;
        else 
            sh_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sigma_1_fu_516_p3 <= 
        ap_const_lv64_BFF0000000000000 when (tmp_32_fu_510_p2(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    sigma_2_fu_620_p3 <= 
        ap_const_lv64_BFF0000000000000 when (tmp_37_fu_614_p2(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    sigma_fu_461_p3 <= 
        ap_const_lv64_BFF0000000000000 when (tmp_27_fu_455_p2(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    sign_factor_fu_382_p3 <= 
        ap_const_lv64_BFF0000000000000 when (tmp_20_fu_376_p2(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    tmp1_fu_554_p2 <= (sel_tmp1_fu_542_p2 or sel_tmp2_fu_548_p2);
    tmp_12_fu_370_p2 <= (notrhs_fu_364_p2 or notlhs_fu_358_p2);
    tmp_20_fu_376_p2 <= (tmp_12_fu_370_p2 and grp_fu_286_p2);
    tmp_21_fu_530_p2 <= "1" when (signed(j_3_fu_524_p2) > signed(ap_const_lv32_3C)) else "0";
    tmp_22_fu_566_p1 <= std_logic_vector(resize(unsigned(j_1_reg_220),64));
    tmp_23_fu_423_p4 <= p_0_to_int_fu_419_p1(62 downto 52);
    tmp_24_fu_433_p1 <= p_0_to_int_fu_419_p1(52 - 1 downto 0);
    tmp_25_fu_449_p2 <= (notrhs1_fu_443_p2 or notlhs1_fu_437_p2);
    tmp_27_fu_455_p2 <= (tmp_25_fu_449_p2 and grp_fu_286_p2);
    tmp_28_fu_478_p4 <= p_1_to_int_fu_474_p1(62 downto 52);
    tmp_29_fu_488_p1 <= p_1_to_int_fu_474_p1(52 - 1 downto 0);
    tmp_30_fu_504_p2 <= (notrhs2_fu_498_p2 or notlhs2_fu_492_p2);
    tmp_32_fu_510_p2 <= (tmp_30_fu_504_p2 and grp_fu_286_p2);
    tmp_33_fu_582_p4 <= beta_assign_1_to_int_fu_578_p1(62 downto 52);
    tmp_34_fu_592_p1 <= beta_assign_1_to_int_fu_578_p1(52 - 1 downto 0);
    tmp_35_fu_608_p2 <= (notrhs3_fu_602_p2 or notlhs3_fu_596_p2);
    tmp_37_fu_614_p2 <= (tmp_35_fu_608_p2 and grp_fu_286_p2);
    tmp_3_fu_396_p2 <= "1" when (signed(j1_reg_156) < signed(ap_const_lv32_1)) else "0";
    tmp_4_fu_402_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(j1_reg_156));
        tmp_5_fu_408_p1 <= std_logic_vector(resize(signed(tmp_4_fu_402_p2),64));

    tmp_6_fu_354_p1 <= beta_to_int_fu_340_p1(52 - 1 downto 0);
    tmp_8_fu_469_p2 <= "1" when (signed(j_1_reg_220) > signed(n)) else "0";
    tmp_fu_344_p4 <= beta_to_int_fu_340_p1(62 downto 52);
end behav;
