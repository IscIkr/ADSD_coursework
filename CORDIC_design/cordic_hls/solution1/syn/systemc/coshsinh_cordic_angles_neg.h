// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __coshsinh_cordic_angles_neg_H__
#define __coshsinh_cordic_angles_neg_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct coshsinh_cordic_angles_neg_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 64;
  static const unsigned AddressRange = 11;
  static const unsigned AddressWidth = 4;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(coshsinh_cordic_angles_neg_ram) {
        ram[0] = "0b0011111111101111001000101101000011100101011000000100000110001001";
        ram[1] = "0b0011111111110101101010011111101111100111011011001000101101000100";
        ram[2] = "0b0011111111111011011110001101010011111101111100111011011001000110";
        ram[3] = "0b0100000000000000100100101010001100000101010100110010011000011000";
        ram[4] = "0b0100000000000011011000000111010111110110111111010010000111111111";
        ram[5] = "0b0100000000000110001010100011000001010101001100100110000101111100";
        ram[6] = "0b0100000000001000111100100001001011010111011100110001100011111100";
        ram[7] = "0b0100000000001011101110001011101011000111000100001100101100101001";
        ram[8] = "0b0100000000001110011111110010111001001000111010001010011100011110";
        ram[9] = "0b0100000000010000101000101001110001110111100110100110101101010001";
        ram[10] = "0b0100000000010010000001011000011110010011110111011001011111110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(coshsinh_cordic_angles_neg) {


static const unsigned DataWidth = 64;
static const unsigned AddressRange = 11;
static const unsigned AddressWidth = 4;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


coshsinh_cordic_angles_neg_ram* meminst;


SC_CTOR(coshsinh_cordic_angles_neg) {
meminst = new coshsinh_cordic_angles_neg_ram("coshsinh_cordic_angles_neg_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~coshsinh_cordic_angles_neg() {
    delete meminst;
}


};//endmodule
#endif
